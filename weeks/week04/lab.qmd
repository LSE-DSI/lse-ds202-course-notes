---
title: "ðŸ’» Week 04 - Lab Roadmap (90 min)"
author: DS202 2022MT Teaching Team
date: 13 October 2022
from: markdown+emoji
---

This week, we will build diverse classification models to deal with situation when the response variable is qualitative in R. We predict these qualitative variables through some widely-used classifiers including Logistic Regression (one of many Generalized Linear Models) and NaÃ¯ve Bayes in this lab session. We will also apply these classification models into practical practices and compare their performance on different data sets.

We will follow the instructions below step by step together while answering whatever questions you might encounter along the way.

R packages you will need:

``` r
install.packages("tidyverse")
install.packages("broom")
install.packages("ISLR2")
install.packages("e1071")
```


<details>

<summary>

Step 1: Explore the dataset (10 min)

</summary>

## Step 1: Explore the dataset


### Step 1.1 Load the Data

Load the `ISLR2` package, which contains a large collection of data sets and functions. We will begin by examining some numerical and graphical summaries of the `Smarket` data, which is part of the `ISLR2` library.

```{r, warning=FALSE, message=FALSE}
library("ISLR2")
head(Smarket)
```

This data set consists of percentage returns for the S&P 500 stock index over 1250 days, from the beginning of 2001 until the end of 2005. We use the command `names()` to obtain the variable names of this data set:

```{r}
names(Smarket)
```

How many rows and columns do we have in this dataset?

```{r}
dim(Smarket)
```

Let's add another column `day` to index the number of days in this dataset:

```{r}
Smarket$day <- 1:nrow(Smarket)
head(Smarket)
```

 For each date, we have recorded the percentage returns for each of the five previous trading days, `Lag1` through `Lag5`. We have also recorded `Volume` (the number of shares traded on the previous day, in billions), `Today` (the percentage return on the date in question) and `Direction` (whether the market was Up or Down on this date). Our goal is to predict `Direction` (a qualitative response) using the other features.

Let's look at a generic summary of this data and how each pair of variables are related:

```{r}
summary(Smarket)
```

```{r}
pairs(Smarket)
```

### Step 1.2 Initial exploratory data analysis

Produce a matrix that contains all of the pairwise correlations among the predictors in a data set:

```{r}
cor(Smarket[, -9])
```

The function `cor()` can only take quantitative variables. Because the `Direction` variable is qualitative, therefore we exclude it when calculating the correlation matrix.

As one would expect, the correlations between the lag variables and today's returns are close to zero. In other words, there appears to be little correlation between today's returns and previous days' returns. The only substantial correlation is between `Year` and `Volume`. We could explore how Volume changed chronologically.

```{r, warning=FALSE, message=FALSE, fig.width=8, fig.dpi=200}
library(tidyverse)

ggplot(data = Smarket, aes(x = day, y = Volume)) +
    geom_col(fill="#665797") +

    ggtitle("Volume of shares traded over the period of this dataset") +

    xlab("Day") + ylab("Volume (in billion US dollars)") +

    theme_minimal() +
    theme(aspect.ratio = 2/5)
```

By plotting the data, which is ordered chronologically, we see that `Volume` is increasing over time. In other words, the average number of shares traded daily increased from 2001 to 2005.

</details>

<details>

<summary>

Step 2: Logistic Regression (25 min)

</summary>

## Step 2: Logistic Regression

We will still use the `Smarket` data set to fit a Logistic Regression Model to predict `Direction`.

### Step 2.1 Separate some data just for training

Build a training and a testing dataset. In practice we will be interested in our model's performance not on the data that we used to fit the model, but rather on days in the future for which the market's movements are unknown. Therefore, we will first create a training data set corresponding to the observations from 2001 through 2004. We will then create a testing data set of observations from 2005.:

```{r}

train <- (Smarket$Year < 2005)
Smarket.before.2005 <- Smarket [ train , ]

Smarket.2005 <- Smarket[ Smarket$Year==2005, ]
Direction.2005 <- Smarket$Direction [ Smarket$Year==2005 ]
```


`Smarket$Year < 2005` returns `True` for the values satisfying `<2005` (smaller than 2005) condition in `Year` column in `Smarket` dataset.  The same logic can be applied to `>`, `<=` , `>=`, `==`(equal) or `!=` (not equal). 

To access corresponding rows, we can create a vector (`train`) and put it in open brackets to make it more readable and reusable, or we can explicitly specify in the open brackets.

Using `Smarket[ Smarket$Year==2005,]` gives all the rows satisfying this condition with all columns. The same logic can be applied to `<` , `>`, `<=` , `>=` or `!=` (not equal).

`Smarket$Direction [ Smarket$Year==2005 ]` tells the `direction` values corresponding to the rows equal to 2005 in the `year` column are requested. 

Thus, we can construct a training data set named Smarket.before.2005, and a testing data set named Smarket.2005.



**How many observations we have in the <mark>training set</mark> (< 2005)?**

```{r}
nrow(Smarket.before.2005)
```

**What about the <mark>test set</mark> (2005)?**

```{r}
nrow(Smarket.2005)
```


### Step 2.2 Fit a logistic regression model

Fit a Logistic Regression Model in order to predict `Direction` using `Lag1` through `Lag5` and `Volume` based on training data set:

```{r}
glm.fits <- 
    glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, 
        data = Smarket.before.2005, family = binomial)
```

The generalized linear model syntax of the `glm()` function is similar to that of `lm()`, except that we must pass in the argument `family = binomial` in order to tell R to run a logistic regression rather than some other type of generalized linear model.

We now fit a logistic regression model using only the subset of the observations that correspond to dates before 2005, using the `subset` argument.

### Step 2.3 Inspect the model

Have a look at p-values of this Logistic Regression Model:

```{r}
summary(glm.fits)
```

Or, alternatively, you can gather the same information using the [broom](https://cran.r-project.org/web/packages/broom/vignettes/broom.html) package:

```{r}
library(broom)

tidy(glm.fits)
```

The smallest p-value here is associated with `Lag1`. The negative coefficient for this predictor suggests that if the market had a positive return yesterday, then it is less likely to go up today. However, at a value of 0.295, the p-value is still relatively large, and so there is no clear evidence of a real association between `Lag1` and `Direction`. So do other predictors.

### Step 2.4 Make predictions about the future (2005)

Obtain predicted probabilities of the stock market going up for each of the days in our testing data set, that is, for the days in 2005:

```{r}
glm.probs <- predict(glm.fits, Smarket.2005, type = "response") 
glm.probs[1:10]   
```

The `predict()` function can be used to predict the probability that the market will go up, given values of the predictors. The `type = "response"` option tells R to output probabilities of the form `P(Y = 1|X)`, as opposed to other information such as the logit. If no data set is supplied to the `predict()` function, then the probabilities are computed for the training data set that was used to fit the logistic regression model. Here we have printed only the first ten probabilities.

```{r}
contrasts(Smarket$Direction)
```

We know that these values correspond to the probability of the market going up, rather than down, because the `contrasts()` function indicates that R has created a dummy variable with a `1` for `Up`.

In order to make a prediction as to whether the market will go up or down on a particular day, we must convert these predicted probabilities into class labels, `Up` or `Down`. The following commands create a vector of class predictions based on whether the predicted probability of a market increase is greater than or less than `0.5`.

```{r}
glm.pred <- rep("Down", 252)
glm.pred[glm.probs > .5] <- "Up"
```

The first command creates a vector of 252 `Down` elements. The second line transforms to `Up` all of the elements for which the predicted probability of a market increase exceeds 0.5.

### Step 2.5 Create a confusion matrix

Construct confusion matrix in order to determine how many observations in testing data set were correctly or incorrectly classified.

```{r}
table(glm.pred, Direction.2005)    
```

Given the predictions, the `table()` function can be used to produce a confusion matrix in order to determine how many observations were correctly or incorrectly classified.

### Step 2.6 What is the error in the test set?

Calculate the test set error rate:

```{r}
mean(glm.pred == Direction.2005)
```

```{r}
mean(glm.pred != Direction.2005)
```

The `!=` notation means not equal to, and so the last command computes the test set error rate. The results are rather disappointing: the test error rate is 52%, which is worse than random guessing! Of course this result is not all that surprising, given that one would not generally expect to be able to use previous days' returns to predict future market performance.

### Step 2.7 Can we find a better combination of features?

Remove the variables that appear not to be helpful in predicting `Direction` and fit a new Logistic Regression model. We recall that the logistic regression model had very underwhelming p-values associated with all of the predictors, and that the smallest p-value, though not very small, corresponded to `Lag1`. Perhaps by removing the variables that appear not to be helpful in predicting `Direction`, we can obtain a more effective model. After all, using predictors that have no relationship with the response tends to cause a deterioration in the test error rate (since such predictors cause an increase in variance without a corresponding decrease in bias), and so removing such predictors may in turn yield an improvement.

```{r}
glm.fits <- glm(Direction ~ Lag1 + Lag2, 
                data = Smarket.before.2005, family = binomial)
summary(glm.fits)
```

```{r}
glm.probs <- predict(glm.fits, Smarket.2005, type = "response")
glm.pred <- rep("Down", 252)
glm.pred[glm.probs > .5] <- "Up"
table(glm.pred , Direction.2005)
```

```{r}
mean(glm.pred == Direction.2005)
```

Check proportion:

```{r}
106 / (106 + 76)
```

Above we have refit the logistic regression using just `Lag1` and `Lag2`, which seemed to have the highest predictive power in the original logistic regression model.

Now the results appear to be a little better: 56% of the daily movements have been correctly predicted. It is worth noting that in this case, a much simpler strategy of predicting that the market will increase every day will also be correct 56% of the time! Hence, in terms of overall error rate, the logistic regression method is no better than the naive approach However, the confusion matrix shows that on days when logistic regression predicts an increase in the market, it has a 58% accuracy rate. This suggests a possible trading strategy of buying on days when the model predicts an increasing market, and avoiding trades on days when a decrease is predicted. Of course one would need to investigate more carefully whether this small improvement was real or just due to random chance.

Suppose that we want to predict the returns associated with particular values of Lag1 and Lag2. In particular, we want to predict Direction on a day when Lag1 and Lag2 equal 1.2 and 1.1, respectively, and on a day when they equal 1.5 and âˆ’0.8. We do this using the predict() function.

```{r}
predict(glm.fits, 
        newdata = data.frame (Lag1 = c(1.2, 1.5), Lag2 = c(1.1, -0.8)), 
        type = "response")
```

### Step 2.8 Logistic regression siblings

In this lab we used the `glm()` function with `family = binomial` to perform logistic regression. Other choices for the `family` argument can be used to fit other types of GLMs. For instance, `family = Gamma` fits a gamma regression model. You can alwarys use the following command to explore more about `family` argument and possible choices.

```r
?glm()
```

</details>

<details>

<summary>

Step 3: Naive Bayes (10 min)

</summary>

## Step 3: Naive Bayes

The `Smarket` data set will still be utilised to fit a naive Bayes classifier to predict `Direction`.

### Step 3.1 Let's fit a Naive Bayes model

Fit a naive Bayes model to predict `Direction` using `Lag1` and `Lag2`:

```{r}
library(e1071)
nb.fit <- naiveBayes (Direction ~ Lag1 + Lag2, data = Smarket, subset = train)
nb.fit
```

Naive Bayes is implemented in R using the `naiveBayes()` function, which is part of the `e1071` library. By default, this implementation of the naive Bayes classifier models each quantitative feature using a Gaussian distribution. However, a kernel density method can also be used to estimate the distributions.

The output contains the estimated mean and standard deviation for each variable in each class. For example, the mean for Lag1 is 0.0428 for Direction=Down, and the standard deviation is 1.23. We can easily verify this:

```{r}
mean(Smarket$Lag1[train][Smarket$Direction[train] == "Down"])
```

```{r}
sd(Smarket$Lag1[train][Smarket$Direction[train] == "Down"])
```

### Step 3.2 Predict the test set

Predict `Direction` in testing data set:

```{r}
nb.class <- predict(nb.fit, Smarket.2005)
table(nb.class, Direction.2005)
```

```{r}
mean(nb.class == Direction.2005)
```

The `predict()` function is straightforward. From the confusion matrix, Naive Bayes performs very well on this data, with accurate predictions over 59% of the time. This is better than Logistic Regression Model.

The `predict()` function can also generate estimates of the probability that each observation belongs to a particular class.

```{r}
nb.preds <- predict(nb.fit, Smarket.2005, type = "raw")
nb.preds[1:5, ]
```

</details>

<details>

<summary>

Step 4: Practical exercises (45 min)

</summary>

## Step 4: Practical exercises (in pairs)

So far, we have learnt to fit some kinds of classification models in R. In this practical case, we will continue to use the data set `Auto`. Make sure that the missing values have been removed from the data.

Six questions are listed below. In this part, you will develop a model to predict whether a given car gets high or low gas mileage based on the `Auto` data set.

ðŸŽ¯ **Questions**

1.  Create a binary variable, `mpg01`, that contains a 1 if `mpg` contains a value above its median, and a 0 if `mpg` contains a value below its median. You can compute the median using the `median()` function. Note you may find it helpful to use the `data.frame()` function to create a single data set containing both `mpg01` and the other `Auto` variables.

2.  Explore the data graphically in order to investigate the association between `mpg01` and the other features. Which of the other features seem most likely to be useful in predicting `mpg01`? Scatterplots and boxplots may be useful tools to answer this question. Describe your findings.

3.  Split the data into a training set and a test set. Train set contains observations before 1979. Test set contains the rest of the observations.

4.  Perform logistic regression on the training data in order to predict `mpg01` using the variables that seemed most associated with `mpg01` in question 2. What is the test error of the model obtained?

5.  Perform naive Bayes on the training data in order to predict `mpg01` using the variables that seemed most associated with `mpg01` in question 2. What is the test error of the model obtained?

6.  Which of these two methods appears to provide the best results on this data? Justify your choice.

</details>
